#!/usr/bin/env python

import os
import numpy as np
import re
import shutil

class aStructure:
    def __init__(self,dirname,libname,species):
        "ref - reference energy of pure compounds"\
        "species - species read from gulp lib file."
        self.scale = 0
        self.cell = []
        self.atomnums = {}
        self.atompos = []
        self.dftref = {}
        self.ffref = {}
        self.dftenergy = 0
        self.minusformation = 0
        self.postype = ''
        self.species = species
        self.lib = libname
        self.dirname = dirname
        self.cnt = 0

    def ReadFromFile(self,filename='CONTCAR'):
        "read VASP CONTCAR by default"
        try:
            fin = open(filename,'r')
        except IOError,e:
            print "Unable to open file: "+filename
        buf = fin.readlines()
        self.scale = float(buf[1].split()[0])
        self.cell = [[float(coord)*self.scale for coord in line.split()] for line in buf[2:5]]        
        self.postype = buf[7]
        pattern = re.compile(r'^(C|c).*')
        self.postype ='cart' if pattern.match(self.postype) else 'frac'
        self.atomnums = dict(zip(buf[5].split(),map(int,buf[6].split())))
        for element in self.atomnums:
            self.cnt = self.cnt + self.atomnums[element]
        self.atompos = [map(float,line.split()[0:3]) for line in buf[8:8+self.cnt]]
        fin.close()
        try:
            fene = open('energy')
        except IOError,e:
            print 'Unable to open file: energy'
        self.dftenergy = float(fene.readline().split()[0])
        fene.close()
            


    def FormatizeCoord(self):
        "Can be revised for bshels in the future."
        coord_out_core = []
        coord_out_shel = []
        count = 0
        for element in self.atomnums:
            types_of_atom = []
            for specie in self.species:
                if element == specie[0]:
                    types_of_atom.append(specie[1])
            pat1 = re.compile(r'^(C|c).*')
            pat2 = re.compile(r'^(S|s).*')
            for aType in types_of_atom:
                if pat1.match(aType):
                    for atom in self.atompos[count:count+self.atomnums[element]]:
                        coord_out_core.append([element,aType]+['{:.8f}'.format(num) for num in atom])
                if pat2.match(aType):
                    for atom in self.atompos[count:count+self.atomnums[element]]:
                        coord_out_shel.append([element,aType]+['{:.8f}'.format(num) for num in atom])
            count = count + self.atomnums[element]
        coord_out = coord_out_core + coord_out_shel
        coord_out = [' '.join(line) for line in coord_out]
        coord_out = '\n'.join(coord_out)+'\n'
        return coord_out
            
    def WriteStruct(self,filename = 'gin.pre'):
        print '\nWriting structure: '+self.dirname
        self.ReadFromFile()
        fout = open(filename,'a')
        fout.write('vectors\n')
        cell_out = [["%.8f" % coord for coord in vec] for vec in self.cell]
        cell_out = ['  '.join(vec) for vec in cell_out]
        cell_out = '\n'.join(cell_out)+'\n'
        print "Writing cell parameters:\n"+cell_out
        fout.write(cell_out+self.postype+' %d\n'%self.cnt+self.FormatizeCoord())
        fout.write('observable\nenergy eV\n'+'{:.8f}'.format(self.dftenergy)+'\nend\n')


def ReadSpecies(filename):
    fin = open(filename,'r')
    buf = fin.readlines()
    pattern1 = re.compile(r'^species.*')
    pattern2 = re.compile(r'^\D*$')
    marker = 0
    index_begin = 0
    index_end = 0
    for line in buf:
        if marker == 2:
            break
        if pattern1.match(line) and marker == 0:
            index_begin = buf.index(line)
            marker = 1
            continue
        if pattern2.match(line):
            if marker == 1:
                index_end = buf.index(line)
                marker = 2
    spc = buf[index_begin+1:index_end]
    print "Species in system: \n"+''.join(spc)
    spc = [line.split()[0:2] for line in spc]
    return spc

print "Warning:\n"+\
"1,Currently only support ATAT generated POSCAR.relax type;\n"+\
"2,Make sure atoms are properly ordered according to atom counts before use!\n"+\
"3,Make sure your reference compound energy is divided to eV per cation!\n"+\
"4,Make Sure that lib file is already modified so that atom names are the same with specie names.\n"
libname = os.path.basename(os.getcwd())+'.lib'
print "Detected library: "+libname+'\n'
species = ReadSpecies(libname)
if os.path.isfile('gin.pre'):
    os.remove('gin.pre')
for dirname in os.listdir('.'):
    if os.path.isdir(dirname):
        os.chdir(dirname)
        shutil.copyfile('../'+libname,'./'+libname)
        struct = aStructure(dirname,libname,species)
        struct.WriteStruct('../gin.pre')
        os.chdir('..')

